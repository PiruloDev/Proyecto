DROP DATABASE IF EXISTS ProyectoPanaderia;
SET SQL_SAFE_UPDATES = 0;
CREATE DATABASE ProyectoPanaderia;
USE ProyectoPanaderia;

-- 1. CLIENTES
CREATE TABLE Clientes (
    ID_CLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_CLI VARCHAR(100) NOT NULL, 
    TELEFONO_CLI VARCHAR(20),       
    EMAIL_CLI VARCHAR(100),
    CONTRASEÑA_CLI VARCHAR(255),
    SALT_CLI VARCHAR(32)
);

-- 2. EMPLEADOS
CREATE TABLE Empleados (
    ID_EMPLEADO INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_EMPLEADO VARCHAR(100) NOT NULL,
    CONTRASEÑA_EMPLEADO VARCHAR(255),
    SALT_EMPLEADO VARCHAR(32)
);

-- 3. ADMINISTRADORES 
CREATE TABLE Administradores (
    ID_ADMIN INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_ADMIN VARCHAR(100) NOT NULL,    
    TELEFONO_ADMIN VARCHAR(20),            
    EMAIL_ADMIN VARCHAR(100),
    CONTRASEÑA_ADMIN VARCHAR(255),
    SALT_ADMIN VARCHAR(32)
);

-- 4. PROVEEDORES
CREATE TABLE Proveedores (
    ID_PROVEEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_PROV VARCHAR(100) NOT NULL,    
    TELEFONO_PROV VARCHAR(20) NOT NULL,    
    EMAIL_PROV VARCHAR(100) NOT NULL,
    DIRECCION_PROV VARCHAR(200)
);

-- 4.1 PEDIDOS A PROVEEDORES
CREATE TABLE Pedidos_Proveedores (
    ID_PEDIDO_PROV INT PRIMARY KEY AUTO_INCREMENT,
    ID_PROVEEDOR INT NOT NULL,
    NUMERO_PEDIDO INT NOT NULL,
    FECHA_PEDIDO DATE NOT NULL,
    ESTADO_PEDIDO VARCHAR(50) DEFAULT 'Pendiente',
    CONSTRAINT FK_PEDIDO_PROVEEDOR
        FOREIGN KEY (ID_PROVEEDOR) REFERENCES Proveedores(ID_PROVEEDOR) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 5. CATEGORÍA DE PRODUCTOS
CREATE TABLE Categoria_Productos (
    ID_CATEGORIA_PRODUCTO INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_CATEGORIAPRODUCTO VARCHAR(100) NOT NULL
);

-- 6. ESTADO DE PEDIDOS
CREATE TABLE Estado_Pedidos (
    ID_ESTADO_PEDIDO INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_ESTADO VARCHAR(50)
);

-- 7. CATEGORÍA DE INGREDIENTES
CREATE TABLE Categoria_Ingredientes (
    ID_CATEGORIA INT PRIMARY KEY AUTO_INCREMENT, 
    NOMBRE_CATEGORIA_INGREDIENTE VARCHAR(100) NOT NULL
);

-- 8. INGREDIENTES
CREATE TABLE Ingredientes (
    ID_INGREDIENTE INT PRIMARY KEY AUTO_INCREMENT,
    ID_PROVEEDOR INT,
    ID_CATEGORIA INT,
    NOMBRE_INGREDIENTE VARCHAR(100) NOT NULL,
    CANTIDAD_INGREDIENTE INT NOT NULL, 
    FECHA_VENCIMIENTO DATE NOT NULL,
    REFERENCIA_INGREDIENTE VARCHAR(100) NOT NULL,
    FECHA_ENTREGA_INGREDIENTE DATE NOT NULL,
    CONSTRAINT FK_PROVEEDOR_INGREDIENTE
        FOREIGN KEY (ID_PROVEEDOR) REFERENCES Proveedores(ID_PROVEEDOR) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT FK_CATEGORIA_INGREDIENTE
        FOREIGN KEY (ID_CATEGORIA) REFERENCES Categoria_Ingredientes(ID_CATEGORIA) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 9. PRODUCTOS
CREATE TABLE Productos (
    ID_PRODUCTO INT PRIMARY KEY AUTO_INCREMENT,
    ID_ADMIN INT,
    ID_CATEGORIA_PRODUCTO INT,
    NOMBRE_PRODUCTO VARCHAR(100) NOT NULL,   
    PRODUCTO_STOCK_MIN INT NOT NULL,
    PRECIO_PRODUCTO DECIMAL(10,2) NOT NULL,    
    FECHA_VENCIMIENTO_PRODUCTO DATE NOT NULL,
    FECHA_INGRESO_PRODUCTO DATE NOT NULL,
    TIPO_PRODUCTO_MARCA VARCHAR(100) NOT NULL,
    FECHA_ULTIMA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_CATEGORIA_PRODUCTO
        FOREIGN KEY (ID_CATEGORIA_PRODUCTO) REFERENCES Categoria_Productos(ID_CATEGORIA_PRODUCTO) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT FK_ADMIN_PRODUCTO
        FOREIGN KEY (ID_ADMIN) REFERENCES Administradores(ID_ADMIN) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 10. PEDIDOS
CREATE TABLE Pedidos (
    ID_PEDIDO INT PRIMARY KEY AUTO_INCREMENT,
    ID_CLIENTE INT,
    ID_EMPLEADO INT,
    ID_ESTADO_PEDIDO INT,
    FECHA_INGRESO DATETIME NOT NULL,
    FECHA_ENTREGA DATETIME NOT NULL,
    TOTAL_PRODUCTO DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_CLIENTE_PEDIDO
        FOREIGN KEY (ID_CLIENTE) REFERENCES Clientes(ID_CLIENTE) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT FK_EMPLEADO_PEDIDO
        FOREIGN KEY (ID_EMPLEADO) REFERENCES Empleados(ID_EMPLEADO) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT FK_ESTADO_PEDIDO_PEDIDO
        FOREIGN KEY (ID_ESTADO_PEDIDO) REFERENCES Estado_Pedidos(ID_ESTADO_PEDIDO) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 11. DETALLE DE PEDIDOS (Nueva tabla para manejar productos por pedido)
CREATE TABLE Detalle_Pedidos (
    ID_DETALLE INT PRIMARY KEY AUTO_INCREMENT,
    ID_PEDIDO INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    CANTIDAD_PRODUCTO INT NOT NULL,
    PRECIO_UNITARIO DECIMAL(10,2) NOT NULL,
    SUBTOTAL DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_DETALLE_PEDIDO
        FOREIGN KEY (ID_PEDIDO) REFERENCES Pedidos(ID_PEDIDO) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_DETALLE_PRODUCTO
        FOREIGN KEY (ID_PRODUCTO) REFERENCES Productos(ID_PRODUCTO) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 12. ÓRDENES DE SALIDA (Facturas)
CREATE TABLE Ordenes_Salida (
    ID_FACTURA INT PRIMARY KEY AUTO_INCREMENT,
    ID_CLIENTE INT,
    ID_PEDIDO INT,
    FECHA_FACTURACION DATETIME NOT NULL,
    TOTAL_FACTURA DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_ORDENSALIDA_CLIENTE
        FOREIGN KEY (ID_CLIENTE) REFERENCES Clientes(ID_CLIENTE) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT FK_ORDENSALIDA_PEDIDO
        FOREIGN KEY (ID_PEDIDO) REFERENCES Pedidos(ID_PEDIDO) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- INSERCIÓN DE DATOS EN EL ORDEN CORRECTO
-- 1. Clientes
INSERT INTO Clientes (NOMBRE_CLI, TELEFONO_CLI, EMAIL_CLI) VALUES
('Ana Pérez', '3101234567', 'ana.p@mail.com'),
('Luis Gómez', '3209876543', 'luis.g@mail.com'),
('Maria Rodriguez', '3001122334', 'maria.r@mail.com');

-- 2. Empleados 
INSERT INTO Empleados (NOMBRE_EMPLEADO) VALUES
('Andres Alkaeda'),
('Damian Avila'),
('Brayan Jimenez'),
('Ana Goyeneche'),
('Sharyt Zamora');

-- 3. Administradores 
INSERT INTO Administradores (NOMBRE_ADMIN, TELEFONO_ADMIN, EMAIL_ADMIN) VALUES
('Admin Uno', '3005550101', 'admin1@store.com');

-- 4. Proveedores (Corregido)
INSERT INTO Proveedores (NOMBRE_PROV, TELEFONO_PROV, EMAIL_PROV, DIRECCION_PROV) VALUES
('ProvExito', '6017778899', 'ventas@provex.com', 'Calle 123 #45-67'),
('DistriTodo', '6014445566', 'info@distritodo.co', 'Carrera 89 #12-34'),
('Suministros ElBuenPan', '6012223300', 'contacto@sumabc.com', 'Avenida 56 #78-90');

-- 4.1 Pedidos a Proveedores
INSERT INTO Pedidos_Proveedores (ID_PROVEEDOR, NUMERO_PEDIDO, FECHA_PEDIDO, ESTADO_PEDIDO) VALUES
(1, 1001, '2024-01-15', 'Entregado'),
(2, 1002, '2024-02-10', 'Entregado'),
(3, 1003, '2024-03-05', 'Entregado');

-- 5. Categoría de Productos
INSERT INTO Categoria_Productos (NOMBRE_CATEGORIAPRODUCTO) VALUES
('Tortas Tres Leches'),
('Tortas Milyway'),
('Tortas por Encargo'),
('Pan Grande'),
('Pan Pequeño'),
('Postres'),
('Galletas'),
('Tamales'),
('Yogures'),
('Pasteles Pollo');

-- 6. Estado de Pedidos 
INSERT INTO Estado_Pedidos (NOMBRE_ESTADO) VALUES
('Pendiente'),
('En Preparación'),
('Listo para Entrega'),
('Entregado'),
('Cancelado');

-- 7. Categoría de Ingredientes
INSERT INTO Categoria_Ingredientes (NOMBRE_CATEGORIA_INGREDIENTE) VALUES
('Huevos'),
('Harinas'),
('Lácteos Base'),
('Endulzantes');

-- 8. Ingredientes 
INSERT INTO Ingredientes (ID_PROVEEDOR, ID_CATEGORIA, NOMBRE_INGREDIENTE, CANTIDAD_INGREDIENTE, FECHA_VENCIMIENTO, REFERENCIA_INGREDIENTE, FECHA_ENTREGA_INGREDIENTE) VALUES
(2, 2, 'Harina de Trigo', 100, '2025-12-20', 'HAR-TRG-05', '2025-05-15'),
(1, 3, 'Leche Entera UHT', 30, '2025-08-01', 'LECH-ENT-1L', '2025-06-05'),
(3, 4, 'Azúcar Blanca', 70, '2026-01-30', 'AZUC-BLN-KG', '2025-05-20');

-- 9. Productos 
INSERT INTO Productos (ID_ADMIN, ID_CATEGORIA_PRODUCTO, NOMBRE_PRODUCTO, PRODUCTO_STOCK_MIN, PRECIO_PRODUCTO, FECHA_VENCIMIENTO_PRODUCTO, FECHA_INGRESO_PRODUCTO, TIPO_PRODUCTO_MARCA) VALUES
(1, 8, 'Tamales Tolimenses', 10, 3500.00, '2025-09-15', '2025-06-10', 'Tamales Don Chucho'),
(1, 4, 'Pan Tajado Integral', 15, 4200.00, '2025-06-25', '2025-06-10', 'Bimbo'),
(1, 9, 'Yogurt Fresa Litro', 12, 6000.00, '2025-07-30', '2025-06-08', 'Alpina'),
(1, 7, 'Galleta de Tres Ojos', 20, 2500.00, '2025-11-01', '2025-06-05', 'Propio');

-- 10. Pedidos de ejemplo
INSERT INTO Pedidos (ID_CLIENTE, ID_EMPLEADO, ID_ESTADO_PEDIDO, FECHA_INGRESO, FECHA_ENTREGA, TOTAL_PRODUCTO) VALUES
(1, 1, 2, '2025-06-20 09:00:00', '2025-06-20 15:00:00', 10000.00),
(2, 2, 4, '2025-06-19 10:30:00', '2025-06-19 16:30:00', 7500.00),
(3, 1, 1, '2025-06-21 08:00:00', '2025-06-21 14:00:00', 12500.00);

-- 11. Detalle de pedidos
INSERT INTO Detalle_Pedidos (ID_PEDIDO, ID_PRODUCTO, CANTIDAD_PRODUCTO, PRECIO_UNITARIO, SUBTOTAL) VALUES
(1, 1, 2, 3500.00, 7000.00),
(1, 3, 1, 6000.00, 6000.00),
(2, 2, 1, 4200.00, 4200.00),
(2, 4, 3, 2500.00, 7500.00),
(3, 1, 3, 3500.00, 10500.00),
(3, 4, 2, 2500.00, 5000.00);

-- 12. Órdenes de Salida (Facturas)
INSERT INTO Ordenes_Salida (ID_CLIENTE, ID_PEDIDO, FECHA_FACTURACION, TOTAL_FACTURA) VALUES
(1, 1, '2025-06-20 15:30:00', 13000.00),
(2, 2, '2025-06-19 17:00:00', 11700.00),
(3, 3, '2025-06-21 14:30:00', 15500.00);

-- ALTER TABLE PARA PRODUCTOS (ACTIVO/INACTIVO)

ALTER TABLE Productos 
ADD COLUMN ACTIVO TINYINT(1) DEFAULT 1 COMMENT '1 = Activo, 0 = Inactivo';

-- Actualizar todos los productos existentes como activos
UPDATE Productos SET ACTIVO = 1 WHERE ACTIVO IS NULL;

-- Verificar los cambios
SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, ACTIVO FROM Productos;


-- APARTADO DE SEGURIDAD 
-- Función para generar salt aleatorio
DELIMITER //

CREATE FUNCTION GenerateSalt() 
RETURNS VARCHAR(32)
READS SQL DATA
DETERMINISTIC
BEGIN
    RETURN SUBSTRING(MD5(CONCAT(RAND(), NOW(), CONNECTION_ID())), 1, 32);
END//

DELIMITER ;

-- Función para hashear contraseñas
DELIMITER //

CREATE FUNCTION HashPassword(password VARCHAR(255), salt VARCHAR(32)) 
RETURNS VARCHAR(255)
READS SQL DATA
DETERMINISTIC
BEGIN
    RETURN SHA2(CONCAT(password, salt), 256);
END//

DELIMITER ;

-- Actualizar contraseñas de administradores
UPDATE Administradores 
SET SALT_ADMIN = GenerateSalt()
WHERE ID_ADMIN = 1;

UPDATE Administradores 
SET CONTRASEÑA_ADMIN = HashPassword('admin123', SALT_ADMIN)
WHERE ID_ADMIN = 1;

-- Actualizar contraseñas de clientes
UPDATE Clientes 
SET SALT_CLI = GenerateSalt()
WHERE ID_CLIENTE IN (1, 2, 3);

UPDATE Clientes 
SET CONTRASEÑA_CLI = HashPassword('cliente123', SALT_CLI)
WHERE ID_CLIENTE = 1;

UPDATE Clientes 
SET CONTRASEÑA_CLI = HashPassword('cliente456', SALT_CLI)
WHERE ID_CLIENTE = 2;

UPDATE Clientes 
SET CONTRASEÑA_CLI = HashPassword('cliente789', SALT_CLI)
WHERE ID_CLIENTE = 3;

-- Actualizar contraseñas de empleados
UPDATE Empleados 
SET SALT_EMPLEADO = GenerateSalt()
WHERE ID_EMPLEADO IN (1, 2, 3, 4, 5);

UPDATE Empleados 
SET CONTRASEÑA_EMPLEADO = HashPassword('empleado123', SALT_EMPLEADO)
WHERE ID_EMPLEADO = 1;

UPDATE Empleados 
SET CONTRASEÑA_EMPLEADO = HashPassword('empleado456', SALT_EMPLEADO)
WHERE ID_EMPLEADO = 2;

-- CONSULTAS DE VERIFICACIÓN MEJORADAS
SELECT 'CLIENTES' as Tabla, COUNT(*) as Total_Registros FROM Clientes
UNION ALL
SELECT 'EMPLEADOS', COUNT(*) FROM Empleados
UNION ALL
SELECT 'ADMINISTRADORES', COUNT(*) FROM Administradores
UNION ALL
SELECT 'PROVEEDORES', COUNT(*) FROM Proveedores
UNION ALL
SELECT 'PEDIDOS_PROVEEDORES', COUNT(*) FROM Pedidos_Proveedores
UNION ALL
SELECT 'CATEGORIA_PRODUCTOS', COUNT(*) FROM Categoria_Productos
UNION ALL
SELECT 'ESTADO_PEDIDOS', COUNT(*) FROM Estado_Pedidos
UNION ALL
SELECT 'CATEGORIA_INGREDIENTES', COUNT(*) FROM Categoria_Ingredientes
UNION ALL
SELECT 'INGREDIENTES', COUNT(*) FROM Ingredientes
UNION ALL
SELECT 'PRODUCTOS', COUNT(*) FROM Productos
UNION ALL
SELECT 'PEDIDOS', COUNT(*) FROM Pedidos
UNION ALL
SELECT 'DETALLE_PEDIDOS', COUNT(*) FROM Detalle_Pedidos
UNION ALL
SELECT 'ORDENES_SALIDA', COUNT(*) FROM Ordenes_Salida;

-- JOIN MEJORADO - Productos con toda su información
SELECT 
    p.ID_PRODUCTO,
    p.NOMBRE_PRODUCTO,
    cp.NOMBRE_CATEGORIAPRODUCTO as CATEGORIA,
    p.PRECIO_PRODUCTO,
    p.PRODUCTO_STOCK_MIN,
    p.TIPO_PRODUCTO_MARCA,
    a.NOMBRE_ADMIN as ADMINISTRADOR,
    p.FECHA_ULTIMA_MODIFICACION
FROM Productos p
INNER JOIN Categoria_Productos cp ON p.ID_CATEGORIA_PRODUCTO = cp.ID_CATEGORIA_PRODUCTO
INNER JOIN Administradores a ON p.ID_ADMIN = a.ID_ADMIN
ORDER BY p.NOMBRE_PRODUCTO;

-- JOIN - Pedidos completos con detalle
SELECT 
    ped.ID_PEDIDO,
    c.NOMBRE_CLI as CLIENTE,
    e.NOMBRE_EMPLEADO as EMPLEADO,
    ep.NOMBRE_ESTADO as ESTADO,
    ped.FECHA_INGRESO,
    ped.FECHA_ENTREGA,
    p.NOMBRE_PRODUCTO,
    dp.CANTIDAD_PRODUCTO,
    dp.PRECIO_UNITARIO,
    dp.SUBTOTAL
FROM Pedidos ped
INNER JOIN Clientes c ON ped.ID_CLIENTE = c.ID_CLIENTE
INNER JOIN Empleados e ON ped.ID_EMPLEADO = e.ID_EMPLEADO
INNER JOIN Estado_Pedidos ep ON ped.ID_ESTADO_PEDIDO = ep.ID_ESTADO_PEDIDO
INNER JOIN Detalle_Pedidos dp ON ped.ID_PEDIDO = dp.ID_PEDIDO
INNER JOIN Productos p ON dp.ID_PRODUCTO = p.ID_PRODUCTO
ORDER BY ped.ID_PEDIDO, dp.ID_DETALLE;

-- TRIGGERS Y PROCEDIMIENTOS ALMACENADOS

-- TRIGGER: Actualizar total del pedido cuando se modifica el detalle
DELIMITER //

CREATE TRIGGER tr_actualizar_total_pedido
AFTER INSERT ON Detalle_Pedidos
FOR EACH ROW
BEGIN
    UPDATE Pedidos 
    SET TOTAL_PRODUCTO = (
        SELECT SUM(SUBTOTAL) 
        FROM Detalle_Pedidos 
        WHERE ID_PEDIDO = NEW.ID_PEDIDO
    )
    WHERE ID_PEDIDO = NEW.ID_PEDIDO;
END//

DELIMITER ;

-- TRIGGER: Actualizar total cuando se modifica un detalle
DELIMITER //

CREATE TRIGGER tr_actualizar_total_pedido_update
AFTER UPDATE ON Detalle_Pedidos
FOR EACH ROW
BEGIN
    UPDATE Pedidos 
    SET TOTAL_PRODUCTO = (
        SELECT SUM(SUBTOTAL) 
        FROM Detalle_Pedidos 
        WHERE ID_PEDIDO = NEW.ID_PEDIDO
    )
    WHERE ID_PEDIDO = NEW.ID_PEDIDO;
END//

DELIMITER ;

-- PROCEDIMIENTO: Buscar productos por categoría (mejorado)
DELIMITER //

CREATE PROCEDURE sp_productos_por_categoria(
    IN nombre_categoria VARCHAR(100)
)
BEGIN
    -- Buscar productos por nombre de categoría
    SELECT 
        p.ID_PRODUCTO,
        p.NOMBRE_PRODUCTO,
        p.PRECIO_PRODUCTO,
        p.PRODUCTO_STOCK_MIN,
        p.TIPO_PRODUCTO_MARCA,
        cp.NOMBRE_CATEGORIAPRODUCTO as CATEGORIA
    FROM Productos p
    INNER JOIN Categoria_Productos cp ON p.ID_CATEGORIA_PRODUCTO = cp.ID_CATEGORIA_PRODUCTO
    WHERE cp.NOMBRE_CATEGORIAPRODUCTO LIKE CONCAT('%', nombre_categoria, '%')
    ORDER BY p.NOMBRE_PRODUCTO;
    
    -- Mostrar el total de productos encontrados
    SELECT COUNT(*) as TOTAL_PRODUCTOS_ENCONTRADOS
    FROM Productos p
    INNER JOIN Categoria_Productos cp ON p.ID_CATEGORIA_PRODUCTO = cp.ID_CATEGORIA_PRODUCTO
    WHERE cp.NOMBRE_CATEGORIAPRODUCTO LIKE CONCAT('%', nombre_categoria, '%');
END//

DELIMITER ;

-- PROCEDIMIENTO: Crear un nuevo pedido
DELIMITER //

CREATE PROCEDURE sp_crear_pedido(
    IN p_id_cliente INT,
    IN p_id_empleado INT,
    IN p_fecha_entrega DATETIME
)
BEGIN
    DECLARE nuevo_id_pedido INT;
    
    -- Insertar el pedido
    INSERT INTO Pedidos (ID_CLIENTE, ID_EMPLEADO, ID_ESTADO_PEDIDO, FECHA_INGRESO, FECHA_ENTREGA, TOTAL_PRODUCTO)
    VALUES (p_id_cliente, p_id_empleado, 1, NOW(), p_fecha_entrega, 0.00);
    
    -- Obtener el ID del pedido recién creado
    SET nuevo_id_pedido = LAST_INSERT_ID();
    
    -- Devolver el ID del nuevo pedido
    SELECT nuevo_id_pedido as NUEVO_ID_PEDIDO;
END//

DELIMITER ;

-- APARTADO DE PRUEBAS

-- Revisar el correcto hasheo de la contraseña Administrador 
SELECT 
    ID_ADMIN,
    NOMBRE_ADMIN,
    SALT_ADMIN,
    CONTRASEÑA_ADMIN,
    LENGTH(CONTRASEÑA_ADMIN) as LONGITUD_HASH
FROM Administradores;

-- Revisar hasheo de los Clientes 

SELECT 
    ID_CLIENTE,
    NOMBRE_CLI,
    SALT_CLI,
    CONTRASEÑA_CLI,
    LENGTH(CONTRASEÑA_CLI) as LONGITUD_HASH
FROM Clientes;

-- Revisar hasheo de los Empleados 

SELECT 
    ID_EMPLEADO,
    NOMBRE_EMPLEADO,
    SALT_EMPLEADO,
    CONTRASEÑA_EMPLEADO,
    LENGTH(CONTRASEÑA_EMPLEADO) as LONGITUD_HASH
FROM Empleados;

-- Observar todas las contraseñas Hasheadas

SELECT 'ADMIN' as TIPO, NOMBRE_ADMIN as NOMBRE, SALT_ADMIN as SALT, CONTRASEÑA_ADMIN as HASH
FROM Administradores
WHERE CONTRASEÑA_ADMIN IS NOT NULL

UNION ALL

SELECT 'CLIENTE' as TIPO, NOMBRE_CLI as NOMBRE, SALT_CLI as SALT, CONTRASEÑA_CLI as HASH
FROM Clientes
WHERE CONTRASEÑA_CLI IS NOT NULL

UNION ALL

SELECT 'EMPLEADO' as TIPO, NOMBRE_EMPLEADO as NOMBRE, SALT_EMPLEADO as SALT, CONTRASEÑA_EMPLEADO as HASH
FROM Empleados
WHERE CONTRASEÑA_EMPLEADO IS NOT NULL;


-- Probar el trigger de actualización de fecha
UPDATE Productos 
SET PRECIO_PRODUCTO = 3800.00 
WHERE NOMBRE_PRODUCTO = 'Tamales Tolimenses';

-- Ver si la fecha de modificación se actualizó
SELECT 
    NOMBRE_PRODUCTO, 
    PRECIO_PRODUCTO, 
    FECHA_ULTIMA_MODIFICACION
FROM Productos 
WHERE NOMBRE_PRODUCTO = 'Tamales Tolimenses';

-- Usar el procedimiento almacenado
CALL sp_productos_por_categoria('Pan');
CALL sp_productos_por_categoria('Torta');
CALL sp_productos_por_categoria('Yogur');

-- Crear un nuevo pedido
CALL sp_crear_pedido(1, 2, '2025-06-25 16:00:00');

-- VERIFICACIONES FINALES

-- Ver los triggers creados
SHOW TRIGGERS WHERE `Table` IN ('Productos', 'Detalle_Pedidos');

-- Ver los procedimientos creados
SHOW PROCEDURE STATUS WHERE Name LIKE 'sp_%';

-- Ver las funciones creadas
SHOW FUNCTION STATUS WHERE Name LIKE '%Password%' OR Name LIKE '%Salt%';

-- Ver la estructura de las tablas principales
DESCRIBE Productos;
DESCRIBE Pedidos;
DESCRIBE Detalle_Pedidos;
